// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @default(autoincrement()) @id
  uuid String @unique 
  phone String  @unique
  name  String @unique
  user_img String 
  articles Gather[]
  user_role Role[]
  categorys Category[]
  collection Collection[]
  dynamic Dynamic[]
  record Records[]
  draft Draft[]
  zan Zan[]
  reading Reading[]
  info Info[] // 被关注的人
  follow Follow[]
}


model Info {
  id Int @default(autoincrement()) @id
  uuid String @unique 
  reading_time String
  message MessageData[]
  article Article[]
  user User[] // 被关注
}

model Follow {
  id Int @default(autoincrement()) @id
  users User @relation(fields: [user_id], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  user_id String
  follow_id String
}

// 消息
model MessageData {
  id Int @default(autoincrement()) @id
  timestamp String
  title String
  article_id String @unique
  article_type ArticleType
  info Info @relation(references: [uuid], fields: [info_id], onUpdate: Cascade, onDelete: Cascade)
  info_id String
}

model Draft {
  id Int @default(autoincrement()) @id
  article_id String 
  time_stmap String
  user User @relation(fields: [user_id], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  user_id String
  draft String @unique
}


// 历史记录
model Records {
  id Int @default(autoincrement()) @id
  user User @relation(fields: [user_id], references: [uuid])
  user_id String
  article Article @relation(fields: [article_id], references: [outer_id], onDelete: Cascade, onUpdate: Cascade)
  article_id String 
  timestamp String 
  percentage String
  record String @unique
}




enum DynamicType {
  ZAN
  Follow
  COLLECTION
  RELEASE
  FollowArticle
}

// 动态
model Dynamic {
  dynamic_id Int @default(autoincrement()) @id
  content String
  type DynamicType
  time_tamp String
  user User[]
}

// 收藏
model Collection {
  collection_id Int @default(autoincrement()) @id
  article Article @relation(fields: [article_id], references: [outer_id], onDelete: Cascade, onUpdate: Cascade)
  article_id String
  user User @relation(fields: [user_id], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  user_id String
  collect_id String @unique
}

enum ArticleType {
  SINGLE
  COLUMN
  GATHER
}


model Gather {
  id Int @default(autoincrement()) @id
  gather_name String @default("")
  article_description String @default("")
  article_type ArticleType @default(COLUMN)
  gather_id String @unique
  gather_img String @default("")
  articles Article[] 
  author User @relation(fields: [authorId], references: [uuid], onUpdate: Cascade, onDelete: Cascade)
  authorId  String
  gather_release Boolean @default(false)
}

model Article {
  id Int @default(autoincrement()) @id
  title String
  outer_id String @unique 
  article String
  description String @default("")
  hot Int @default(0)
  readings Reading[]
  zan Zan[]
  gather Gather @relation(fields: [gather_id], references: [gather_id], onUpdate: Cascade, onDelete: Cascade)
  gather_id String
  article_img String
  edit_time String
  release Boolean @default(false)
  labels Label[]
  categorys Category[]
  records Records[]
  collection Collection[]
  info Info[]
}

model Zan {
  id Int @default(autoincrement()) @id
  article Article @relation(fields: [article_id], references: [outer_id], onUpdate: Cascade, onDelete: Cascade)
  article_id String
  author User @relation(fields: [authorId], references: [uuid], onUpdate: Cascade, onDelete: Cascade)
  authorId  String
  zan_id String @unique
}

model Reading {
  id Int @default(autoincrement()) @id
  article Article @relation(fields: [article_id], references: [outer_id], onUpdate: Cascade, onDelete: Cascade)
  article_id String
  author User @relation(fields: [authorId], references: [uuid], onUpdate: Cascade, onDelete: Cascade)
  authorId  String
  reading_id String @unique
}

enum RoleType {
  USER
  ADMIN
}

model Role {
  user_uuid User @relation(fields: [uuid], references: [uuid], onUpdate: Cascade, onDelete: Cascade)
  uuid String @unique
  role RoleType @default(USER)
}

model Category {
  id    Int    @id @default(autoincrement())
  name String @unique
  description String @unique
  category_id String @unique
  labels Label[]
  user User[]
  gather Article[]
}

model Label {
  id    Int    @id @default(autoincrement())
  label_id String @unique
  name String @unique
  description String @unique
  categorys Category @relation(fields: [category], references: [category_id], onUpdate: Cascade, onDelete: Cascade)
  category String 
  gather Article[]
}