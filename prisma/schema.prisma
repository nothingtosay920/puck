// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @default(autoincrement()) @id
  open_id String @unique
  uuid_user String @unique 
  phone String  @unique
  name  String @unique
  user_img String 
  message Message[]
  muster_data  Muster[]
  gather_data Gather[]
  user_role Role[]
  categorys CategoryUserMap[]
  collection Collection[]
  follow Follow[]
  be_follow BeFollow[]
  dynamic Dynamic[]
  record Records[]
  draft Draft[]
  zan_list UserZan[]
}

// 消息
model Message {
  id Int @default(autoincrement()) @id
  reading_time String
  message MessageData[]
  user User @relation(fields: [user_id], references: [uuid_user])
  user_id String
}

model MessageData {
  id Int @default(autoincrement()) @id
  user_id String
  artile_id String
  time_stamp String
  message Message @relation(references: [id], fields: [data_id])
  data_id Int
}

model Draft {
  id Int @default(autoincrement()) @id
  article_id String @unique
  time_stmap String
  type String
  user User @relation(fields: [user_id], references: [uuid_user])
  user_id String
  title String
}


// 文章被关注
model MusterArticleBeFollowed {
  id Int @default(autoincrement()) @id
  muster_article MusterArticle @relation(fields: [muster_article_id], references: [outer_id], onDelete: Cascade)
  muster_article_id String
  user_id String
}

model GatherArticleBeFollowed {
  id Int @default(autoincrement()) @id
  gather_article GatherArticle @relation(fields: [gather_article_id], references: [outer_id], onDelete: Cascade)
  gather_article_id String
  user_id String
}

// 历史记录
model Records {
  id Int @default(autoincrement()) @id
  user User @relation(fields: [user_id], references: [uuid_user])
  user_id String
  article_id String @unique
  timestamp String
  percentage String
}

model BeFollow {
  id Int @default(autoincrement()) @id
  user User @relation(fields: [user_id], references: [uuid_user])
  user_id String
  be_followed String
}

enum DynamicType {
  ZAN
  Follow
  COLLECTION
  RELEASE
  FollowArticle
}

// 动态
model Dynamic {
  dynamic_id Int @default(autoincrement()) @id
  content String
  type DynamicType
  time_tamp String
  user User @relation(fields: [user_id], references: [uuid_user])
  user_id String
}

// 收藏
model Collection {
  collection_id Int @default(autoincrement()) @id
  article_id String @unique
  user User @relation(fields: [user_id], references: [uuid_user])
  user_id String
}

model Follow {
  follow_id Int @default(autoincrement()) @id
  follow_user String
  user User @relation(fields: [user_id], references: [uuid_user])
  user_id String
}

enum MusterType {
  SINGLE
  MUSTER
}

model Muster {
  id Int @default(autoincrement()) @id
  name String @default("")
  description String
  type MusterType @default(MUSTER)
  muster_id String @unique
  muster_img String
  author User @relation(fields: [authorId], references: [uuid_user])
  authorId  String
  article_data MusterArticle[]
}

model Gather {
  id Int @default(autoincrement()) @id
  description String
  gather_img String
  gather_id String @unique
  author User @relation(fields: [authorId], references: [uuid_user])
  authorId  String
  article_data GatherArticle[]
  labels GatherLabelMap[] 
  categorys CategoryGatherMap[]
}


model UserZan {
  id Int @default(autoincrement()) @id
  author User @relation(fields: [authorId], references: [uuid_user])
  authorId  String
  article_id String @unique
  timestamp String
}

model GatherArticle {
  id Int @default(autoincrement()) @id

  title String
  outer_id String @unique
  article String
  hot Int @default(0)
  readings Int @default(0)
  zan Int @default(0)
  author Gather @relation(fields: [gather], references: [gather_id], onDelete: NoAction)
  gather String
  article_img String
  article_type String @default("GATHER") 
  edit_time String
  release Boolean @default(false)
  befollowed GatherArticleBeFollowed[]
}

model MusterArticle {
  id Int @default(autoincrement()) @id
  title String
  
  description String
  outer_id String @unique
  article String
  hot Int @default(0)
  readings Int @default(0)
  zan Int @default(0)
  edit_time String
  data Muster @relation(fields: [muster], references: [muster_id], onDelete: NoAction)
  muster String
  release Boolean @default(false)
  article_img String
  article_type String @default("MUSTER") 
  labels MusterLabelMap[] 
  categorys CategoryMusterMap[]
  befollowed MusterArticleBeFollowed[]
}

enum RoleType {
  USER
  ADMIN
}

model Role {
  user_uuid User @relation(fields: [uuid], references: [uuid_user])
  uuid String @unique
  role RoleType @default(USER)
}

model CategoryUserMap {
  id    Int    @id @default(autoincrement())
  User User @relation(fields: [user_uuid], references: [uuid_user])
  user_uuid String
  Category Category @relation(fields: [category], references: [category_id])
  category String 
}

model CategoryMusterMap {
  id    Int    @id @default(autoincrement())
  MusterArticle MusterArticle @relation(fields: [article_id], references: [outer_id], onDelete: Cascade)
  article_id String
  Category Category @relation(fields: [category], references: [category_id], onDelete: Cascade)
  category String 
}

model CategoryGatherMap {
  id    Int    @id @default(autoincrement())
  GatherArticle Gather @relation(fields: [article_id], references: [gather_id], onDelete: Cascade)
  article_id String
  Category Category @relation(fields: [category], references: [category_id])
  category String 
}

model Category {
  id    Int    @id @default(autoincrement())
  name String @unique
  description String @unique
  category_id String @unique
  labels Label[]
  CategoryUserMap CategoryUserMap[]
  CategoryMusterMap CategoryMusterMap[]
  CategoryGatherMap CategoryGatherMap[]
}

model MusterLabelMap {
  id    Int    @id @default(autoincrement())
  MusterArticle MusterArticle @relation(fields: [article_id], references: [outer_id], onDelete: Cascade)
  article_id String
  Labels Label @relation(fields: [label], references: [label_id])
  label String 
}

model GatherLabelMap {
  id    Int    @id @default(autoincrement())
  GatherArticle Gather @relation(fields: [article_id], references: [gather_id], onDelete: Cascade)
  article_id String
  Labels Label @relation(fields: [label], references: [label_id])
  label String 
}

model Label {
  label_id String @unique
  name String @unique
  description String @unique
  categorys Category @relation(fields: [category], references: [category_id], onDelete: Cascade)
  category String 
  MusterLabelMap MusterLabelMap[]
  GatherLabelMap GatherLabelMap[]
}